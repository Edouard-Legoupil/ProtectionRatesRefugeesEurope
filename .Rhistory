filter(Citizen == "TOTAL" ) %>%
filter(Decision == "TOTAL" ) %>%
group_by(GeoIso) %>%
summarise(CountForOrder=sum(Count)) %>%
ungroup() %>%
arrange(desc(CountForOrder))
#View(allCountries)
# Get the counts of most common and others ...
totalCount <- sum( allCountries$CountForOrder)
# Here is our sliced data
mostCommonCountries <- allCountries[1:12,]
mostCommonCount <- sum( mostCommonCountries$CountForOrder)
otherCount <- totalCount - mostCommonCount
dcvSummary <- rbind( mostCommonCountries, data.frame(GeoIso="Other", CountForOrder=otherCount))
# Check it
View(dcvSummary)
#-------------------------------------------------------------------------------------------------------
# Now lets create our actual data cube
# Lets join it to the most common countries to pull accross the CountForOrder col which will be NA fo other countres
dcvt <- left_join(dataCubeVis, mostCommonCountries, by=c("GeoIso"="GeoIso") )
# Important - ensure that the levels of the Citizen data are consistent with the order in the citizen list...
levels(dcvt$Citizen) <- citizenList
# Then we split our dataCube into two by filtering the other countries and set the GeoIso col and a new GeoName col to 0
# We also want to reset the CountForOrder as we want other to appear at the end...
dataCubeTemp <- filter(dcvt, is.na(CountForOrder)) %>%
mutate(GeoIso="Other", GeoName="Other", CountForOrder=0)
dcvt <- filter(dcvt, is.na(CountForOrder) == FALSE)  %>% mutate(GeoName=name)
# Then we join it back together again
dcvt <- rbind( dcvt, dataCubeTemp)
View(dcvt)
# Collapse all the "other" rows by grouping the data
dcvt <- dcvt %>%
group_by(GeoIso, GeoName, Citizen, Decision) %>%
summarise(Count=sum(Count), CountForOrder=max(CountForOrder)) %>%
ungroup() %>%
arrange(desc(CountForOrder))
# Double check that the names are gucci
names(dcvt) <- c("GeoIso", "GeoName", "Citizen","Decision","Count", "CountForOrder")
# Filter the data summary to include just the total counts
dcvtTotal <- dcvt %>%
filter(Citizen == "TOTAL") %>%
filter(Decision == "TOTAL")
# Filter the data summary to include just the total counts
dcvtTotalCitizens <- dcvt %>%
filter(Citizen != "TOTAL") %>%
filter(Decision == "TOTAL")
# And for the detailed views, remove the citizens and decisions total, which is not relevant for these charts
dcvtDetails <- dcvt %>%
filter(Citizen != "TOTAL") %>%
filter(Decision != "TOTAL")
#levels(dcvtDetails$Citizen) <- citizenList
# We're going to try to show a few totals on the chart directly, so lets create a well formatted total
dcvtTotal <- dcvtTotal %>% mutate(CountLabel=comma(Count))
dcvtTotalCitizens <- dcvtTotalCitizens %>% mutate(CountLabel=comma(Count))
# Check them
#View(dcvtTotal)
#View(dcvtTotalCitizens)
#View(dcvtDetails)
#-------------------------------------------------------------------------------------------------------
# Summary 3 - the % of each decision type by country and broken out by country of origin
# Lets pull across the proper name for the Decisions from the decisionList data fram
dcvDecisions <- left_join(dcvtDetails, decisionList, by=c("Decision"="DecisionKey"))
# And lets remove the totals as they are not necessary for this view
dcvDecisions <- filter(dcvDecisions, Decision != "TOTAL")
# This creates the percent and the percent label columns - it looks a little intense,
dcvDecisions <- dcvDecisions %>%
group_by(GeoIso, Citizen) %>%
# okay, we've got the total, now we can do some math with mutate
mutate( GeoCitizenTotal=sum(Count, na.rm=T)) %>%
ungroup() %>%
group_by(GeoIso, Citizen, Decision) %>%
# okay, now lets also create a label for all columns
mutate(
Percent=GetPercent(Count, GeoCitizenTotal, 0),
PercentLabel=GetPercentLabel(Percent, 15.0)) %>%
ungroup()
# Then strip out all the zeros - this is probably not necessary, but they will also not be shown..
dcvDecisions <- filter(dcvDecisions, Percent > 0 )
#warnings()
# Good to have a quick look at the data here
#View(dcvDecisions)
# This is a good point to save this data cube - so we can get back to it if needed ...
write.csv2(dcvtTotal, str_c("../02_OutputData/Summary_Totals.csv"))
# This is a good point to save this data cube - so we can get back to it if needed ...
write.csv2(dcvtTotalCitizens, str_c("../02_OutputData/Summary_Totals_by_CountryOfOrigin.csv"))
# This is a good point to save this data cube - so we can get back to it if needed ...
write.csv2(dcvDecisions, str_c("../02_OutputData/Summary_Decisions.csv"))
# This is a good point to save this data cube - so we can get back to it if needed ...
write.csv2(dcvtTotal, str_c("../02_OutputData/Summary_Totals.csv"))
# This is a good point to save this data cube - so we can get back to it if needed ...
write.csv2(dcvtTotal, str_c("/02_OutputData/Summary_Totals.csv"))
# This is a good point to save this data cube - so we can get back to it if needed ...
write.csv2(dcvtTotal, str_c("02_OutputData/Summary_Totals.csv"))
# This is a good point to save this data cube - so we can get back to it if needed ...
write.csv2(dcvtTotalCitizens, str_c("02_OutputData/Summary_Totals_by_CountryOfOrigin.csv"))
knitr::opts_chunk$set(echo = TRUE)
# Lets write the three summary files to disk
# This is a good point to save this data cube - so we can get back to it if needed ...
write.csv2(dcvtTotal, str_c("02_OutputData/Summary_Totals.csv"))
../
# Lets write the three summary files to disk
# This is a good point to save this data cube - so we can get back to it if needed ...
write.csv2(dcvtTotal, str_c("../02_OutputData/Summary_Totals.csv"))
# Lets write the three summary files to disk
# This is a good point to save this data cube - so we can get back to it if needed ...
write.csv2(dcvtTotal, "../02_OutputData/Summary_Totals.csv")
# This is a good point to save this data cube - so we can get back to it if needed ...
write.csv2(dcvtTotalCitizens, "../02_OutputData/Summary_Totals_by_CountryOfOrigin.csv")
# Magic.  we got there finally - after 750 lines of code - lets take a screenshot and print out the map using the MapView library
mapshot(m,file="05_OutputVisualisation/MapScreenShot.png")
# Magic.  we got there finally - after 750 lines of code - lets take a screenshot and print out the map using the MapView library
mapshot(m,file="ScreenShot.png")
#-------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------
# Visualise Eurostat asylum decisions
# Step 3 - Visualise the data
#-------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------
#--0-- install the relevant libraries
# for the joins and lots of other cool things
library(dplyr)
# for loading Json
library(jsonlite)
# for the string manipulation
library(stringr)
# for visualisation
# install.packages("leaflet")
library(leaflet)
library(ggplot2)
# for taking screenshots
#install.packages("mapview")
#webshot::install_phantomjs()
library(mapview)
# for reordering arrays
library(forcats)
# for pretty fonts - see https://cran.r-project.org/web/packages/extrafont/README.html
#install.packages('extrafont')
library(extrafont)
# One time hit
#font_import()
#fonts()
# Lets try to use Trebuchet for the charts
fontsForCharts <- c( "Trebuchet MS" )
# For formatting pretty numbers ...
library(scales)
# to read the png files
library(png)
# to render the images in a grob
library(grid)
# for the final arrangements
library(gridExtra)
#-------------------------------------------------------------------------------------------------------
# Worker functions ...
#-------------------------------------------------------------------------------------------------------
#----- Lookup for the country of origin name
LabelGetCoOName <-
function(value) {
message(str_c(value, "    ", citizenList[value]))
value <- citizenList[value]
}
#-------------------------------------------------------------------------------------------------------
# Summary 1 - the total number of decisions by the top 12 countries of asylum and the others grouped together
# Maybe use a log scale here?
plot1 <- ggplot(dcvtTotal,
aes(x=fct_reorder(GeoName, CountForOrder, desc=TRUE),
# Lets plot in '000s to reduce the number of zeros shown
y=(Count),
label=CountLabel)) +
geom_bar(stat="identity") +
# And this is to present the labels ...
geom_text(hjust=-0.2, size = 4, colour="#505050") +
scale_y_continuous(limits=c(0,max(dcvtTotal$Count)*1.15)) +
coord_flip() +
labs(
title="Decisions by country of asylum",
y="",
x="",
#    caption="Source: Eurostat",
caption="",
family=fontsForCharts) +
# set a very minimal theme
theme_minimal(base_family=fontsForCharts) +
# Tweak the axis text
theme(
axis.text.x=element_text(family=fontsForCharts, colour="#aaaaaa", size=10),
axis.text.y=element_text(family=fontsForCharts, size=12))
plot1
#-------------------------------------------------------------------------------------------------------
# Summary 2 - the total number of decisions by the top 12 countries of asylum and top 5 countries of origin
# Maybe use a log scale here?
plot2 <- ggplot(dcvtTotalCitizens,
aes(x=fct_reorder(GeoName, CountForOrder, desc=TRUE),
y=Count,
label=CountLabel)) +
geom_bar(stat="identity") +
# And this is to present the labels ...
geom_text(hjust=-0.2, size = 3, colour="#505050") +
coord_flip() +
facet_wrap(~Citizen, labeller=as_labeller(LabelGetCoOName), ncol=5) +
labs(
title="Number of decisions by nationality",
y="",
x="",
#    caption="Source: Eurostat",
caption="",
family=fontsForCharts) +
# set a very minimal theme
theme_minimal(base_family=fontsForCharts) +
# Tweak the axis text
theme(
axis.text.x=element_text(family=fontsForCharts, colour="#aaaaaa", size=7),
axis.text.y=element_text(family=fontsForCharts, size=12))
plot2
#-------------------------------------------------------------------------------------------------------
# Summary 3 - the % of each decision type by country and broken out by country of origin
pos <- position_fill(vjust=0.47)
plot3 <- ggplot(dcvDecisions,
# The x axis is the names of the countries ordered by the overall count
aes(x=fct_reorder(GeoName, CountForOrder, desc=TRUE),
# and the y axis is the percentage based on the variable (with the zeros removed)
y=Percent,
# and the labels are the percentage label strings
label=PercentLabel,
# and the fill is the decisions
fill=DecisionTitle,
na.rm=TRUE)) +
geom_bar(position=pos, stat="identity") +
geom_text(position=pos, size = 3, colour="#ffffff") +
# Then set our colours and legend labels using the parameters of scale_fill_manual
# note that we strim as needed to avoid the total count
scale_fill_manual(values=as.vector(decisionList$DecisionLegend[2:5])) +
# flip the coordinates
coord_flip() +
# set the labels
labs(title="Type of decisions by nationality (%)",
y="",
x="",
fill="",
caption="Source: Eurostat",
family=fontsForCharts) +
# set a very minimal theme
theme_minimal(base_family=fontsForCharts) +
# These two lines tweak the positioning of the legend and hide the x axis ticks need to go AFTER the call to theme_minimal
theme(
axis.text.x=element_blank(),
axis.text.y=element_text(family=fontsForCharts, size=12)) +
theme(legend.position="bottom" ) +
facet_wrap(. ~Citizen, labeller=as_labeller(LabelGetCoOName), ncol=5)
plot3
#-------------------------------------------------------------------------------------------------------
#cof <- colorFactor(c("#53a7dd"), domain=c("Total"))
dcvMap <- left_join(allCountries, countryCentroids, by=c("GeoIso"="country") )
View(dcvMap)
# Get the range of values ...
## Ok would need to logarithm the counts here ... to make them look prettier
#radiusFactor = (pi * 20 * 20)/log10(max(dcvMap$CountForOrder))
radiusFactor = (40)/log10(max(dcvMap$CountForOrder))
mapBoxURL <- "https://api.mapbox.com/styles/v1/edgarscrase/cjl1c78tn37v72sofn80jo9en/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiZWRnYXJzY3Jhc2UiLCJhIjoiY2pram90c3M3MWRxdjNxcWhzOXRzY3N6ZCJ9._HQxSBcViAYVr9Bg1OWI_A"
# old https://api.mapbox.com/styles/v1/edgarscrase/cjl1c78tn37v72sofn80jo9en.html?fresh=true&title=true&access_token=pk.eyJ1IjoiZWRnYXJzY3Jhc2UiLCJhIjoiY2pram90c3M3MWRxdjNxcWhzOXRzY3N6ZCJ9._HQxSBcViAYVr9Bg1OWI_A#3.4/57.750060/17.037912/0
# mapbox://styles/edgarscrase/cjl1c78tn37v72sofn80jo9en
# Try using leaflet but actually this is not going to look that clean!
m <- leaflet(dcvMap)  %>%
addTiles(urlTemplate = mapBoxURL,
attribution="MapBox") %>%
setView(5, 50, zoom = 4) %>%
addCircleMarkers(~longitude, ~latitude, popup=dcvMap$name, weight = 3, radius=round(radiusFactor * log10(dcvMap$CountForOrder),0),
color="#e77b37", stroke = F, fillOpacity = 0.5)
# Magic.  we got there finally - after 750 lines of code - lets take a screenshot and print out the map using the MapView library
mapshot(m,file="ScreenShot.png")
# and then read it back in.
mapImage <- readPNG("ScreenShot.png")
m
# Add the map image to another plot
plotMap <- qplot(1,1) + annotation_custom(rasterGrob(mapImage)) +
labs(title="Number of decisions on asylum applications in Europe by country",
y="",
x="",
fill="",
caption="",
family=fontsForCharts) +
# set a very minimal theme
theme_minimal(base_family=fontsForCharts) +
# These two lines tweak the positioning of the legend and hide the x axis ticks need to go AFTER the call to theme_minimal
theme(
axis.ticks = element_blank(),
axis.line = element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
plotMap
#-------------------------------------------------------------------------------------------------------
# Finally - output - lets bring it all together!
# Try summary chart and map and then the two detailed charts
firstRow <- grid.arrange(plot1, plotMap, ncol=2)
grid.arrange(firstRow, plot2, plot3, nrow=3)
# Other alternatives
chartsCol <- grid.arrange(plot1, plot2, plot3, nrow=3)
grid.arrange(plotMap, chartsCol, ncol=2)
grid.arrange(plot1, plotMap, plot2, plot3, nrow=4)
# Magic.  we got there finally - after 750 lines of code - lets take a screenshot and print out the map using the MapView library
mapshot(m,file="../05_OutputVisualisation/MapScreenShot.png")
# Magic.  we got there finally - after 750 lines of code - lets take a screenshot and print out the map using the MapView library
mapshot(m,file="05_OutputVisualisation/MapScreenShot.png")
# Magic.  we got there finally - after 750 lines of code - lets take a screenshot and print out the map using the MapView library
mapshot(m,file="MapScreenShot.png")
# for the joins and lots of other cool things
library(dplyr)
#-------------------------------------------------------------------------------------------------------
# Protection rates of refugees in Europe
#-------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------
# Libraries that are required ....
# for the joins and lots of other cool things
library(dplyr)
# for loading Json
library(jsonlite)
# for the string manipulation
library(stringr)
# For formatting pretty numbers
library(scales)
# for reordering arrays
library(forcats)
# for pretty fonts - see https://cran.r-project.org/web/packages/extrafont/README.html
#install.packages('extrafont')
library(extrafont)
# Run this once to load in all the available fonts (this will take a few mins) and restart R afterwards
#font_import()
#fonts() # Check which fonts are now available
# Lets try to use Trebuchet for the charts
fontsForCharts <- c( "Trebuchet MS" )
# for visualisation on maps and in plots
library(leaflet)
library(ggplot2)
# for taking screenshots of the map - note that you also need to install phantomjs
#install.packages("mapview")
#webshot::install_phantomjs()
library(mapview)
# to read the png files
library(png)
# to render the images as graphical object to display in an arrangement
library(grid)
# for the final arrangements
library(gridExtra)
#-------------------------------------------------------------------------------------------------------
#-----Step 1----- Load the country spatial data and load the Asylum decision data from EuroStat
source("04_Scripts/LoadData.R")
#-----Step 2----- Transform the data
source("04_Scripts/TransformData.R")
#-----Step 3----- Visualise the data
source("04_Scripts/TransformData.R")
#-------------------------------------------------------------------------------------------------------
# Protection rates of refugees in Europe
#-------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------
# Libraries that are required ....
# for the joins and lots of other cool things
library(dplyr)
# for loading Json
library(jsonlite)
# for the string manipulation
library(stringr)
# For formatting pretty numbers
library(scales)
# for reordering arrays
library(forcats)
# for pretty fonts - see https://cran.r-project.org/web/packages/extrafont/README.html
#install.packages('extrafont')
library(extrafont)
# Run this once to load in all the available fonts (this will take a few mins) and restart R afterwards
#font_import()
#fonts() # Check which fonts are now available
# Lets try to use Trebuchet for the charts
fontsForCharts <- c( "Trebuchet MS" )
# for visualisation on maps and in plots
library(leaflet)
library(ggplot2)
# for taking screenshots of the map - note that you also need to install phantomjs
#install.packages("mapview")
#webshot::install_phantomjs()
library(mapview)
# to read the png files
library(png)
# to render the images as graphical object to display in an arrangement
library(grid)
# for the final arrangements
library(gridExtra)
#-------------------------------------------------------------------------------------------------------
#-----Step 1----- Load the country spatial data and load the Asylum decision data from EuroStat
source("04_Scripts/LoadData.R")
#-----Step 2----- Transform the data
source("04_Scripts/TransformData.R")
#-----Step 3----- Visualise the data
source("04_Scripts/TransformData.R")
#-----Step 3----- Visualise the data
source("04_Scripts/VisualiseData.R")
#-------------------------------------------------------------------------------------------------------
# Protection rates of refugees in Europe
#-------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------
# Libraries that are required ....
# for the joins and lots of other cool things
library(dplyr)
# for loading Json
library(jsonlite)
# for the string manipulation
library(stringr)
# For formatting pretty numbers
library(scales)
# for reordering arrays
library(forcats)
# for pretty fonts - see https://cran.r-project.org/web/packages/extrafont/README.html
#install.packages('extrafont')
library(extrafont)
# Run this once to load in all the available fonts (this will take a few mins) and restart R afterwards
#font_import()
#fonts() # Check which fonts are now available
# Lets try to use Trebuchet for the charts
fontsForCharts <- c( "Trebuchet MS" )
# for visualisation on maps and in plots
library(leaflet)
library(ggplot2)
# for taking screenshots of the map - note that you also need to install phantomjs
#install.packages("mapview")
#webshot::install_phantomjs()
library(mapview)
# to read the png files
library(png)
# to render the images as graphical object to display in an arrangement
library(grid)
# for the final arrangements
library(gridExtra)
#-------------------------------------------------------------------------------------------------------
#-----Step 1----- Load the country spatial data and load the Asylum decision data from EuroStat
source("04_Scripts/LoadData.R")
#-----Step 2----- Transform the data
source("04_Scripts/TransformData.R")
#-----Step 3----- Visualise the data
source("04_Scripts/VisualiseData.R")
# Try summary chart and map and then the two detailed charts
firstRow <- grid.arrange(plot1, plotMap, ncol=2, heightDetails(1500))
plot3 <- ggplot(dcvDecisions,
# The x axis is the names of the countries ordered by the overall count
aes(x=fct_reorder(GeoName, CountForOrder, desc=TRUE),
# and the y axis is the percentage based on the variable (with the zeros removed)
y=Percent,
# and the labels are the percentage label strings
label=PercentLabel,
# and the fill is the decisions
fill=DecisionTitle,
na.rm=TRUE), heightDetails(1500)) +
geom_bar(position=pos, stat="identity") +
geom_text(position=pos, size = 3, colour="#ffffff") +
# Then set our colours and legend labels using the parameters of scale_fill_manual
# note that we strim as needed to avoid the total count
scale_fill_manual(values=as.vector(decisionList$DecisionLegend[2:5])) +
# flip the coordinates
coord_flip() +
# set the labels
labs(title="Type of decisions by nationality (%)",
y="",
x="",
fill="",
caption="Source: Eurostat",
family=fontsForCharts) +
# set a very minimal theme
theme_minimal(base_family=fontsForCharts) +
# These two lines tweak the positioning of the legend and hide the x axis ticks need to go AFTER the call to theme_minimal
theme(
axis.text.x=element_blank(),
axis.text.y=element_text(family=fontsForCharts, size=12)) +
theme(legend.position="bottom" ) +
facet_wrap(. ~Citizen, labeller=as_labeller(LabelGetCoOName), ncol=5)
plot3 <- ggplot(dcvDecisions,
# The x axis is the names of the countries ordered by the overall count
aes(x=fct_reorder(GeoName, CountForOrder, desc=TRUE),
# and the y axis is the percentage based on the variable (with the zeros removed)
y=Percent,
# and the labels are the percentage label strings
label=PercentLabel,
# and the fill is the decisions
fill=DecisionTitle,
na.rm=TRUE), heightDetails(1500)) +
geom_bar(position=pos, stat="identity") +
geom_text(position=pos, size = 3, colour="#ffffff") +
# Then set our colours and legend labels using the parameters of scale_fill_manual
# note that we strim as needed to avoid the total count
scale_fill_manual(values=as.vector(decisionList$DecisionLegend[2:5])) +
# flip the coordinates
coord_flip() +
# set the labels
labs(title="Type of decisions by nationality (%)",
y="",
x="",
fill="",
caption="Source: Eurostat",
family=fontsForCharts) +
# set a very minimal theme
theme_minimal(base_family=fontsForCharts) +
# These two lines tweak the positioning of the legend and hide the x axis ticks need to go AFTER the call to theme_minimal
theme(
axis.text.x=element_blank(),
axis.text.y=element_text(family=fontsForCharts, size=12)) +
theme(legend.position="bottom" ) +
facet_wrap(. ~Citizen, labeller=as_labeller(LabelGetCoOName), ncol=5)
plot3
